# ============ pe.audio.sys SERVICES LAUNCHER and tcp addressing  ==============
# Adressing pairs listed here will trigger the tcp server
# to run the underlying service

services_addressing:

    # syntax:
    # <service>_address:    x.x.x.x | localhost
    # <service>_port:       N

    # the MAIN service to control the audio and preamp (MANDATORY)
    pasysctrl_address:      0.0.0.0
    pasysctrl_port:         9989

    # Auxiliary functions service (optional)
    aux_address:            localhost
    aux_port:               9988

    # Players management service (optional)
    players_address:        0.0.0.0
    players_port:           9987


# ===========================  SOUND CARDS =====================================

# Main system card alsa name
system_card: hw:UDJ6

# Additional cards to be used resampled under jack,
# either as capture or as playback devices.
# resamplingQuality: 0..4 for alsa_in/out or 16..96 for zita-a2j/j2a
# sintax:
# <card jack name>
#   {alsacard: ..., resampler: ..., resamplingQ:..., misc_params:...}
external_cards:

    # sintax:
    #<descriptor_name>  will be used to name the belonging jack ports
    #    alsacard: <hw:ALSANAME>
    #    resampler: <zita-a2j | zita-j2a | alsa_in | alsa_out>
    #    resamplingQ: <NN>
    #    misc_params: <''>

    # some examples:
    # This is used to capture
    #LineIN:
    #    alsacard: hw:CODEC
    #    resampler: zita-a2j
    #    resamplingQ: 96
    #    misc_params: ''
    
    # This is used just to RTA external monitoring
    #DEQ2496:
    #    alsacard: hw:CODEC
    #    resampler: zita-j2a
    #    resamplingQ: 48
    #    misc_params: ''


# ===================  JACK SOUND CARD CONFIGURATION  ==========================

# DUMMY backend for testing:
#jack_options:           -R -d dummy
#jack_backend_options:   -r 48000 -P 6 -C 2

# ALSA backend (leave $system_card under options below,
#               it will be replaced by the actual name)
jack_options:           -R -d alsa
jack_backend_options:   -d $system_card -r 48000 -p 1024 -n2 


# =========================  LIMITS  ===========================================

# Max balance setting authorised
balance_max:   6.0

# Max gain authorised at convolver output
gain_max:    0.0

# Loudness EQ compensation ceil ( dBrefSPL )
loud_ceil:  0.0

# ========================== THE LOUDSPEAKER  ==================================

# Put here your loudspeaker folder name
loudspeaker: SeasFlat

# Gain dBFS at convolver output to obtain the reference SPL (level = 0.0):
ref_level_gain: -10.0

# ========================= STARTUP BEHAVIOR: ==================================
# (i) Leave blank these fields to restore from the last state,
#     or indicate a value to force.
#     Use quotes for string type options (midside, solo, input).

on_init:

    # Put here the common IDSTRING that identifies the XO FIR filters at start up.
    # ie: xo.lo.IDSTRING.pcm  xo.hi.IDSTRING.pcm
    xo:     mp

    # Put here the IDSTRING that identifies the DRC FIR filters at start up.
    # ie: drc.L.IDSTRING.pcm  drc.R.IDSTRING.pcm
    drc:    mp_multipV1

    # Put here just whatever the target filename prefix,
    # w/o '_mag.dat' neither '_pha.dat'
    target: +4.0-2.0_target

    # Others settings: (if any max_level will override level)
    level:              
    max_level:          -20
    muted:              false
    bass:               0
    treble:             0
    balance:            0
    loudness_track:     true
    loudness_ref:       6.0     # most records suffers loudness war mastering
    midside:            'off'
    solo:               'off'
    input:              'mpd'


# =================== BEHAVIOR WHEN CHANGE INPUT:  =============================
# (i) Leave blank these fields or indicate a value to force.
#     Use quotes for string type options (midside and solo).

on_change_input:
    bass:               0.0
    treble:             0.0
    loudness_track:     true
    loudness_ref:       6.0     # most records suffers loudness war mastering
    midside:            'off'
    solo:               'off'


# ============================  SOURCES  =======================================
# (i)
#     - If capture_ports here are named 'xxxxloop', then the preamp will
#       automagically spawn them for the sources can connect into. Obviously the
#       sources must be configured accordingly.
#
#     - xo, drc fields are optional, you may want minimum phase FIRs for video.
#
#     - loudness_ref field is optional and overrides the on_change_input behavior.

sources:

    spotify:
        capture_port:   alsa_loop
        gain:           0.0
        xo:             mp
    mpd:
        capture_port:   mpd_loop
        gain:           0.0
        xo:             mp
    istreams:
        capture_port:   mplayer_istreams
        gain:           0.0
        xo:             mp
    salon:
        capture_port:   zita-n2j
        gain:           0.0
        xo:             mp
    analog:
        capture_port:   system
        gain:           0.0
        xo:             mp

# ========================== SOURCE MONITOR PORTS ==============================
# The source selector will connect the source also here.
# If an external card is used, then the <monitorName> must match the
# <descriptor_name> usen in the above external_cards: section.

source_monitors:

    # syntax
    # - <monitorName>
    # - DEQ2496
    - PortAudio

# ================ SCRIPTS YOU WANT TO RUN (players, etc...)  ==================
# The scripts files are located under the share/scripts folder.
# Files must be executable, also must accept 'start' and 'stop' as
# command line argument in order to be launched and stopped at system startup.

scripts:

    ## IR remote receiver
    #- ir.py
    
    ## Inserts a parametric EQ based on 'fil' plugin (LADSPA) hosted under Ecasound
    ## This option needs the share/eq/xxxxx.ecs file to be indicated.
    #- ecasound_peq.py: dj_estant.ecs

    ## Releases cards from Pulseaudio and restore alsa mixer settings:
    - sound_cards_prepare.py
    
    ## Runs MPD:
    #- mpd.py
    
    ## Internet url audio streams player based on Mplayer:
    - istreams.py
    
    ## Set Pulseaudio apps to sound through by JACK:
    #- pulseaudio-jack-sink.py
    
    ## DVB-T player based on Mplayer, useful for DVB-T radio stations:
    #- DVB-T.py
    
    ## A Mplayer based CDDA player:
    #- CDDA.py
    
    ## librespot (a headless Spotify Connect player daemon)
    #- librespot.py
    
    ## Plays audio streamed from AirPlay sources
    #- shairport-sync.py
    
    ## A LAN multicast audio receiver
    #- zita-n2j_mcast.py
    
    ## A LAN multicast audio sender
    #- zita-j2n_mcast.py
    
    ## A Spotify Desktop monitor
    #- spotify_monitor.py
    
    ## Controls the volume by a mouse
    #- mouse_volume_daemon.py
    
    ## A daemon that monitorizes the EBU R128 Loudness Integrated
    ## (please add 'PortAudio' to your source_monitors list above)
    #- loudness_monitor.py
    


# ==================== AUX SERVICES CONFIGURATION ==============================

aux:

    # Configure here your command line script to SWITCH ON/OFF your AMPLIFIER.
    # (i) It is expected that the script will store the amplifier state
    #         'on'|'1'    or    'off'|'0'
    #     into the file '~/.amplifier' so that others processes could know about.
    amp_manager:  /home/predic/bin/ampli.sh

